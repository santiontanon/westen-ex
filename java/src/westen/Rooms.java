/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package westen;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import util.Pletter;
import util.Z80Assembler;
import util.ZX0Wrapper;

/**
 *
 * @author santi
 */
public class Rooms {
    public static int MAX_OBJECT_SPACE = 256*15;
    
    public static HashMap<Integer, String> objectIDToName = new HashMap<>();
    public static HashMap<Integer, int[]> objectDimensions = new HashMap<>();
    public static HashMap<String, int[]> objectDimensionsName = new HashMap<>();
    
    public static void main(String args[]) throws Exception
    {
        String roomsFolder = "data/rooms/";
                        
        generateMapData(roomsFolder, 
                        new String[]{"intro"}, 
                        "src/autogenerated/intromap");
        
        generateMapData(roomsFolder, 
                        new String[]{"part1/room0",
                                     "part1/room1",
                                     "part1/room2-lobby",
                                     "part1/room3",
                                     "part1/room4",
                                     "part1/room5-dining",
                                     "part1/room6",
                                     "part1/room7-library",
                                     "part1/room8-kitchen",
                                     "part1/room9-storage",
                                     "part1/room10",
                                     "part1/room11-backyard"}, 
                        "src/autogenerated/map1");
        
        generateMapData(roomsFolder, 
                        new String[]{"part2/room16",
                                     "part2/room17-music",
                                     "part2/room18-bath",
                                     "part2/room19",
                                     "part2/room20-writing",
                                     "part2/room21",
                                     "part2/room22-closet",
                                     "part2/room23",
                                     "part2/room24-ritual"}, 
                        "src/autogenerated/map2");        

        generateMapData(roomsFolder, 
                        new String[]{"part3/room32",
                                     "part3/room33",
                                     "part3/room34",
                                     "part3/room35-vampire1",
                                     "part3/room36",
                                     "part3/room37",
                                     "part3/room38",
                                     "part3/room39",
                                     "part3/room40-chapel",
                                     "part3/room41",
                                     "part3/room42-vampire3",
                                     "part3/room43-workshop",
                                     "part3/room44-feeding",
                                     "part3/room45-vampire2",
                                     "part3/room46"}, 
                        "src/autogenerated/map3"); 
        
        generateMapData(roomsFolder, 
                        new String[]{"part4/room48",
                                     "part4/room49",
                                     "part4/room50",
                                     "part4/room51-bath",
                                     "part4/room52-bedroom1",
                                     "part4/room53-bedroom2",
                                     "part4/room54-bedroom3",
                                     "part4/room55-bath",
                                     "part4/room56-bedroom4",
                                     "part4/room57-bath",
                                     "part4/room58-bedroom5",
                                     "part4/room59-bath",
                                     "part4/room60",
                                     "part4/room61-lab"}, 
                        "src/autogenerated/map4");         
    }
    
    
    public static void generateMapData(String roomsFolder, String rooms[], String outputFileName) throws Exception
    {
        List<List<Integer>> roomData = new ArrayList<>();
        
        for(String room:rooms) {
            String roomFileName = roomsFolder + room + ".txt";
            roomData.add(generateRoomData(roomFileName));
        }
        
        // Compile all the room data into a map:
        List<Integer> data = new ArrayList<>();
        for(int i = 0;i<roomData.size();i++) {
            int size = roomData.get(i).size();
            data.add(size%256);
            data.add(size/256);
            data.addAll(roomData.get(i));
        }
        
        Z80Assembler.dataToBinary(data, outputFileName + ".bin");
        Pletter.intMain(new String[]{outputFileName+".bin", outputFileName+".plt"});
        ZX0Wrapper.main(outputFileName+".bin", outputFileName+".zx0", true, false);
    }
    
    
    public static List<Integer> doorColliderObjectX(
            String tokens[], int objectID, String objectName, List<String> usedObjects)
    {
        if (!usedObjects.contains(objectName)) {
            usedObjects.add(objectName);
        }
        List<Integer> object = new ArrayList<>();
        object.add(objectID);
        object.add(Integer.parseInt(tokens[1])+4);  // x
        object.add(0); // y
        object.add(Integer.parseInt(tokens[2])*8); // z
        return object;
    }


    public static List<Integer> doorColliderObjectY(
            String tokens[], int objectID, String objectName, List<String> usedObjects)
    {
        if (!usedObjects.contains(objectName)) {
            usedObjects.add(objectName);
        }
        List<Integer> object = new ArrayList<>();
        object.add(objectID);
        object.add(0);  // x
        object.add(Integer.parseInt(tokens[1])+2); // y
        object.add(Integer.parseInt(tokens[2])*8); // z
        return object;
    }


    public static int[] getObjectDimensions(int ID) throws Exception
    {
        String name = objectIDToName.get(ID);
        
        if (ID>=244) {
            // enemies:
            return new int[]{8, 8, 8};
        }
        
        switch(ID) {
            case 10: name = "doorframe-brick-left"; break;
            case 11: name = "doorframe-brick-right"; break;
            case 15: 
            case 80: name = "door-left"; break;
            case 16:
            case 25:
            case 68:
            case 89:
            case 111: 
            case 125: name = "door-right"; break;
            case 127: name = "door-left"; break;
            case 55:
            case 56: 
            case 188: 
            case 97: name = "heart"; break;
            case 26: name = "doorframe-entrance-right"; break;
            case 29: name = "doorframe-wood-left"; break;
            case 30: name = "doorframe-wood-right"; break;
            case 47: name = "safe-right"; break;
            case 81: name = "chest2"; break;
            case 82: name = "book"; break;
            case 83:
            case 84:
            case 159:
            case 85: name = "door-vampire-right"; break;
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110: name = "crate-breakable"; break;
            case 139: name = "beggar-dead"; break;
            case 140: name = "bookshelves-nw"; break;
            case 141: name = "bookstack"; break;
            case 143: name = "bookshelves-nw"; break;
            case 148: name = "doorframe-gothic-left"; break;
            case 149: name = "doorframe-gothic-right"; break;
            case 161: name = "bookshelves-nw"; break;
            case 167: name = "bookstack"; break;
            case 171:
            case 172:
            case 173: 
            case 182: name = "chest"; break;
            case 174:
            case 175:
            case 176: name = "door-prison-ne"; break;
            case 184:
            case 185: name = "arrow-shooter"; break;
        }
        if (name == null) {
            throw new Exception("Do not know the name of " + ID);
        }
        
        if (!objectDimensions.containsKey(ID)) {
            FileInputStream fis = new FileInputStream(new File("src/autogenerated/objects/" + name + ".bin"));
            fis.read(); fis.read(); // skip size
            fis.read(); fis.read(); // skip screen size
            int dims[] = new int[]{fis.read(), fis.read(), fis.read()};
            System.out.println(name + " -> " + Arrays.toString(dims));
            objectDimensions.put(ID, dims);
        }
        return objectDimensions.get(ID);
    }
    
    
    public static int[] getObjectDimensionsFromName(String name) throws Exception
    {
        if (name.equals("rat") || name.equals("spider") || name.equals("slime")) {
            return new int[]{8,8,8};
        }
        if (!objectDimensionsName.containsKey(name)) {
            FileInputStream fis = new FileInputStream(new File("src/autogenerated/objects/" + name + ".bin"));
            fis.read(); fis.read(); // skip size
            fis.read(); fis.read(); // skip screen size
            int dims[] = new int[]{fis.read(), fis.read(), fis.read()};
            System.out.println(name + " -> " + Arrays.toString(dims));
            objectDimensionsName.put(name, dims);
        }
        return objectDimensionsName.get(name);
    }
    
    
    public static List<Integer> generateRoomData(String roomFileName) throws Exception
    {
        List<Integer> data = new ArrayList<>();
        List<String> usedObjects = new ArrayList<>();
        
        // We will sort them after adding all of them, and then add to "data":
        List<List<Integer>> objects = new ArrayList<>();
        
        // List to add the additional objects used for blocking the door frames:
//        List<List<Integer>> doorObjects = new ArrayList<>();
        
        BufferedReader br = new BufferedReader(new FileReader(roomFileName));
                
        String line = br.readLine();
        String tokens[] = line.split(" ");
        data.add(Integer.parseInt(tokens[0]));  // x
        data.add(Integer.parseInt(tokens[1]));  // y
        data.add(Integer.parseInt(tokens[2]));  // width
        data.add(Integer.parseInt(tokens[3]));  // height
        
        line = br.readLine().strip();
        if (line.equals("no-floor")) {
            data.add(0);
        } else if (line.equals("blue_tiles_border")) {
            data.add(1);
        } else if (line.equals("grass")) {
            data.add(2);
        } else if (line.equals("wood")) {
            data.add(3);
        } else if (line.equals("street1")) {
            data.add(4);
        } else if (line.equals("street2")) {
            data.add(5);
        } else if (line.equals("street3")) {
            data.add(6);
        } else if (line.equals("white_tiles_border")) {
            data.add(7);
        } else {
            throw new Exception("Unknown floor type " + line);
        }

        line = br.readLine().strip();
        if (line.equals("no-wall")) {
            data.add(0);
        } else if (line.equals("bookshelves")) {
            data.add(1);
        } else if (line.equals("blue_bricks")) {
            data.add(2);
        } else if (line.equals("entrance")) {
            data.add(3);
        } else if (line.equals("victorian")) {
            data.add(4);
        } else if (line.equals("victorian-tiles")) {
            data.add(5);
        } else if (line.equals("victorian-blue")) {
            data.add(6);
        } else if (line.equals("blue_bricks_shelves")) {
            data.add(7);
        } else if (line.equals("ossuary_ne")) {
            data.add(8);
        } else if (line.equals("ossuary_nw")) {
            data.add(9);
        } else if (line.equals("white_stone")) {
            data.add(10);
        } else if (line.equals("white_stone_nw")) {
            data.add(11);
        } else {
            throw new Exception("Unknown wall type " + line);
        }
        
        // Doors:
        int nDoors = Integer.parseInt(br.readLine().strip());
        data.add(nDoors);
        for(int i = 0;i<nDoors;i++) {
            line = br.readLine().strip();
            tokens = line.split(" ");
            switch(tokens[0]) {
                case "door-empty-nw": data.add(1); break;
                case "door-left-brick": 
                    data.add(2);
                    objects.add(doorColliderObjectY(tokens, 10, "doorframe-brick-left", usedObjects));
                    break;
                case "door-left-brick-stairs": 
                    data.add(3); 
                    objects.add(doorColliderObjectY(tokens, 10, "doorframe-brick-left", usedObjects));
                    break;
                case "door-left-bookshelf": 
                    data.add(4); 
                    objects.add(doorColliderObjectY(tokens, 8, "doorframe-bookshelf-left", usedObjects));
                    break;
                case "door-wood-nw":
                    data.add(5);
                    objects.add(doorColliderObjectY(tokens, 29, "doorframe-wood-left", usedObjects));
                    break;
                case "door-victorian-tiles-nw":
                    data.add(6);
                    objects.add(doorColliderObjectY(tokens, 29, "doorframe-victorian-tiles-left", usedObjects));
                    break;
                case "door-gothic-nw":
                    data.add(7);
                    objects.add(doorColliderObjectY(tokens, 148, "doorframe-gothic-left", usedObjects));
                    break;
                
                case "door-empty-ne": data.add(64+1); break;
                case "door-right-brick": 
                    data.add(64+2);
                    objects.add(doorColliderObjectX(tokens, 11, "doorframe-brick-right", usedObjects));
                    break;
                case "door-right-brick-stairs": 
                    data.add(64+3); 
                    objects.add(doorColliderObjectX(tokens, 11, "doorframe-brick-right", usedObjects));
                    break;
                case "door-right-bookshelf": 
                    data.add(64+4); 
                    objects.add(doorColliderObjectX(tokens, 9, "doorframe-bookshelf-right", usedObjects));
                    break;
                case "door-right-entrance": 
                    data.add(64+5); 
                    objects.add(doorColliderObjectX(tokens, 26, "doorframe-entrance-right", usedObjects));
                    break;
                case "door-wood-ne":
                    data.add(64+6);
                    objects.add(doorColliderObjectX(tokens, 30, "doorframe-wood-right", usedObjects));
                    break;
                case "door-victorian-tiles-ne":
                    data.add(64+7);
                    objects.add(doorColliderObjectX(tokens, 30, "doorframe-victorian-tiles-right", usedObjects));
                    break;
                case "door-gothic-ne":
                    data.add(64+8);
                    objects.add(doorColliderObjectX(tokens, 149, "doorframe-gothic-right", usedObjects));
                    break;
                    
                
                case "door-empty-se": data.add(64*2+1); break;
                case "door-se": data.add(64*2+2); break;
                case "door-wood-se": data.add(64*2+3); break;
                case "door-gothic-se": data.add(64*2+4); break;

                case "door-empty-sw": data.add(64*3+1); break;
                case "door-sw": data.add(64*3+2); break;
                case "door-wood-sw": data.add(64*3+3); break;
                case "door-gothic-sw": data.add(64*3+4); break;
                
                default:
                    throw new Exception("unknown door type: " + tokens[0]);                    
            }
            
            data.add(Integer.parseInt(tokens[1]));  // position in the wall
            data.add(Integer.parseInt(tokens[2]));  // z height
            data.add(Integer.parseInt(tokens[3]));  // destination room
            data.add(Integer.parseInt(tokens[4]));  // destination door
        }        
        
        // Objects:
        int nObjects = Integer.parseInt(br.readLine().strip());
        for(int i = 0;i<nObjects;i++) {
            List<Integer> object = new ArrayList<>();
            line = br.readLine().strip();
            tokens = line.split(" ");
            {
                String objectName = tokens[0];
                if (objectName.equals("door-left-red")) objectName = "door-left";
                if (objectName.equals("door-left-yellow")) objectName = "door-left";
                if (objectName.equals("door-left-no-key")) objectName = "door-left";
                if (objectName.equals("door-right-yellow")) objectName = "door-right";
                if (objectName.equals("door-right-blue")) objectName = "door-right";
                if (objectName.equals("door-right-no-key")) objectName = "door-right";
                if (!usedObjects.contains(objectName)) {
                    usedObjects.add(objectName);
                }
            }
            switch(tokens[0]) {
                case "stool": object.add(2); break;
                case "chair-right": object.add(3); break;
                case "chair-left": object.add(4); break;
                case "table-1": object.add(5); break;
                case "table-2": object.add(6); break;
                case "tombstone": object.add(7); break;
                // 8: doorframe-bookshelf-left
                // 9: doorframe-bookshelf-right
                // 10: brick door frame left
                // 11: brick door frame right
                case "stairs-nw-1": object.add(12); break;
                case "stairs-nw-2": object.add(13); break;
                case "yellow-key": object.add(14); break;
                case "door-left-red": object.add(15); break;
                case "door-right-yellow": object.add(16); break;
                case "gun-key": object.add(17); break;
                case "clock-right": object.add(18); break;     
                case "fence": object.add(19); break;
                case "stone": object.add(20); break;
                case "flower": object.add(21); break;
                case "column": object.add(22); break;
                case "platform1": object.add(23); break;
                case "platform2": object.add(24); break;
                case "door-right-white": object.add(25); break;
                // 26: door right entrance
                case "stair-steps-right": object.add(27); break;
                case "stair-steps-rail": object.add(28); break;
                // 29: wood door frame left
                // 30: wood door frame right
                case "chest": object.add(31); break;
                case "painting-right": object.add(32); break;
                case "hanger": object.add(33); break;
                case "vase": object.add(34); break;
                case "night-table": object.add(35); break;
                case "dining-table-1": object.add(36); break;
                case "dining-table-2": object.add(37); break;
                case "crate": object.add(38); break;
                case "couch": object.add(39); break;
                case "window-ne": object.add(40); break;
                case "barrel": object.add(41); break;
                case "shelves-nw": object.add(42); break;
                case "sink": object.add(43); break;
                case "letter3": object.add(44); break;
                case "lamp": object.add(45); break;
                case "oil": object.add(46); break;
                case "painting-safe-right": object.add(47); break;
                // 48: safe right
                case "spiderweb": object.add(49); break;
                case "toilet": object.add(50); break;
                case "chest2": object.add(51); break;
                case "bathtub": object.add(52); break;
                case "gramophone": object.add(53); break;
                case "violin": object.add(54); break;
                case "heart1": object.add(55); break;
                case "heart2": object.add(56); break;
                case "bookstack": object.add(57); break;
                case "writing-table-1": object.add(58); break;
                case "writing-table-2": object.add(59); break;
                case "book": object.add(60); break;
                case "tall-crate": object.add(61); break;
                case "tall-stool": object.add(62); break;
                case "candle1": object.add(63); break;
                case "candle2": object.add(64); break;
                case "candle3": object.add(65); break;
                case "pentagram1": object.add(66); break;
                case "pentagram2": object.add(67); break;
                case "door-ritual": object.add(68); break;
                case "brickwall": object.add(69); break;
                case "grid": object.add(70); break;
                case "column-blue": object.add(71); break;
                case "spikes": object.add(72); break;
                case "blue-brick": object.add(73); break;
                case "torch": object.add(74); break;
                case "bones1": object.add(75); break;
                case "bones2": object.add(76); break;
                case "bones3": object.add(77); break;
                case "coffin-1": object.add(78); break;
                case "coffin-2": object.add(79); break;
                case "door-left-yellow": object.add(80); break;
                case "chest-gun": object.add(81); break;
                case "book-westenra": object.add(82); break;
                case "door-vampire1": object.add(83); break;
                case "door-vampire2": object.add(84); break;
                case "door-vampire3": object.add(85); break;
                case "red-carpet": object.add(86); break;
                case "altar": object.add(87); break;
                case "cross": object.add(88); break;
                case "door-right-green": object.add(89); break;
                case "green-key": object.add(90); break;
                case "carpet-1": object.add(91); break;
                case "carpet-2": object.add(92); break;
                case "fireplace": object.add(93); break;
                case "window-left": object.add(94); break;
                case "bed-1": object.add(95); break;
                case "bed-2": object.add(96); break;
                case "heart3": object.add(97); break;
                case "diary1": object.add(98); break;
                case "diary2": object.add(99); break;
                case "diary3": object.add(100); break;
                case "lab-bottle": object.add(101); break;
                case "lab-bottles": object.add(102); break;
                case "lab-notes": object.add(103); break;
                case "hammer": object.add(104); break;
                case "crate-garlic1": object.add(105); break;
                case "crate-garlic2": object.add(106); break;
                case "crate-garlic3": object.add(107); break;
                case "crate-stake1": object.add(108); break;
                case "crate-stake2": object.add(109); break;
                case "crate-stake3": object.add(110); break;
                case "door-right-blue": object.add(111); break;
                // 112: garlic1
                // 113: garlic2
                // 114: garlic3
                // 115: stake1
                // 116: stake2
                // 117: stake3
                case "fence2": object.add(118); break;
                case "bookshelves-nw": object.add(119); break;
                case "night-table-nw": object.add(120); break;
                case "bookstack-home": object.add(121); break;
                case "luggage": object.add(122); break;
                case "newspaper": object.add(123); break;
                case "university-notes": object.add(124); break;
                case "door-right-no-key": object.add(125); break;
                case "doorstep": object.add(126); break;
                case "door-left-no-key": object.add(127); break;
                // 128: collider event
                case "streetlamp": object.add(129); break;
                case "streetlamp-wall": object.add(130); break;
                case "street-corner": object.add(131); break;
                case "watkins-column": object.add(132); break;
                case "watkins-sign": object.add(133); break;
                case "watkins-door": object.add(134); break;
                case "horsecar": object.add(135); break;
                case "horse": object.add(136); break;
                case "beggar": object.add(137); break;
                case "beggar-bag": object.add(138); break;
                // 139: beggar-dead
                case "bookshelves-store-nw": object.add(140); break;
                case "bookstack-store": object.add(141); break;
                case "bookstore-clerk": object.add(142); break;
                case "bookshelves-store-nw-book": object.add(143); break;
                case "choffeur": object.add(144); break;
                case "lucy-torn-note": object.add(145); break;
                case "secret-staircase": object.add(146); break;
                case "sarcophagus": object.add(147); break;
                // 148: gothic door frame left
                // 149: gothic door frame right
                case "vlad-statue": object.add(150); break;
                case "suit-of-armor-nw": object.add(151); break;
                case "suit-of-armor-ne": object.add(152); break;
                case "suit-of-armor-sw": object.add(153); break;
                case "banner-nw": object.add(154); break;
                case "banner-ne": object.add(155); break;
                case "dining-table-middle": object.add(156); break;
                case "chair-ne": object.add(157); break;
                case "chair-sw": object.add(158); break;
                case "door-vampire4": object.add(159); break;
                case "coin-pile": object.add(160); break;
                case "bookshelves2-nw": object.add(161); break;
                case "puzzle-box": object.add(162); break;
                case "tall-black-brick": object.add(163); break;
                case "desk-ne": object.add(164); break;
                case "vlad-diary": object.add(165); break;
                case "black-stairs-nw": object.add(166); break;
                case "bookstack-vlad": object.add(167); break;
                case "mirror": object.add(168); break;
                case "mirror-ne": object.add(169); break;
                case "mirror-clue": object.add(170); break;
                case "chest-reveal": object.add(171); break;
                case "chest-reveal-2": object.add(172); break;
                case "chest-cutlery": object.add(173); break;
                case "door-prison-entrance-ne": object.add(174); break;
                case "door-prison-franky-ne": object.add(175); break;
                case "door-prison-passage-ne": object.add(176); break;
                case "vlad-ritual": object.add(177); break;
                case "grid2": object.add(178); break;
                case "skeleton-ne": object.add(179); break;
                case "cauldron": object.add(180); break;
                case "switch": object.add(181); break;
                case "chest-shovel": object.add(182); break;
                case "brickwall-thin": object.add(183); break;
                case "arrow-shooter-x": object.add(184); break;
                case "arrow-shooter-y": object.add(185); break;
                case "skeleton": object.add(186); break;
                // 187: skeleton key
                case "heart4": object.add(188); break;
                case "open-grave": object.add(189); break;
                case "clay": object.add(190); break;
                case "log-book": object.add(191); break;
                case "franky": object.add(192); break;
                // 193: franky note
                
                case "rat": object.add(244); break;
                // 245: bullet
                case "spider": object.add(246); break;
                case "slime": object.add(247); break;
                case "bat": object.add(248); break;
                case "snake": object.add(249); break;
                // 250: snake with just 1 hit point left
                case "arrow": object.add(251); break;
                // 252: skeleton mini boss
                // 253: franky mini boss
                default:
                    throw new Exception("unknown object "
                            + "type: " + tokens[0]);
            }
            // x, y, z for objects
            // z, y, z, state, state timer for enemies
            for(int j = 1;j<tokens.length;j++) {
                object.add(Integer.parseInt(tokens[j]));  
            }
            
            objectIDToName.put(object.get(0), tokens[0]);
            
            objects.add(object);
        }
        
        Collections.sort(objects, new Comparator<List<Integer>>() {
            @Override
            public int compare(List<Integer> o1, List<Integer> o2) {           
                try {
                    {
                        // sort by x:
                        int o1_x1 = o1.get(1)*8;
                        int o1_x2 = o1.get(1)*8 + getObjectDimensions(o1.get(0))[0];
                        int o2_x1 = o2.get(1)*8;
                        int o2_x2 = o2.get(1)*8 + getObjectDimensions(o2.get(0))[0];
                        if (o1_x2 <= o2_x1) return -1;
                        if (o2_x2 <= o1_x1) return 1;
                    }
                    {
                        // sort by y:
                        int o1_y1 = o1.get(2)*8;
                        int o1_y2 = o1.get(2)*8 + getObjectDimensions(o1.get(0))[1];
                        int o2_y1 = o2.get(2)*8;
                        int o2_y2 = o2.get(2)*8 + getObjectDimensions(o2.get(0))[1];
                        if (o1_y2 <= o2_y1) return -1;
                        if (o2_y2 <= o1_y1) return 1;
                    }
                    {
                        // sort by z:
                        int o1_z1 = (o1.get(3) > 128 ? o1.get(3) - 256: o1.get(3));
                        int o1_z2 = o1_z1 + getObjectDimensions(o1.get(0))[2];
                        int o2_z1 = (o2.get(3) > 128 ? o2.get(3) - 256: o2.get(3));
                        int o2_z2 = o2_z1 + getObjectDimensions(o2.get(0))[2];
                        if (o1_z2 <= o2_z1) return -1;
                        if (o2_z2 <= o1_z1) return 1;
                    }
                    return 0;
                } catch(Exception e) {
                    e.printStackTrace();
                    System.exit(1);
                    return 0;
                }      
            }
        });

        System.out.println("Sorted:");
        data.add(objects.size());
        for(List<Integer> object:objects) {
            String hexId = Z80Assembler.toHex8bit(object.get(0));
            System.out.println("    "+objectIDToName.get(object.get(0))+" ("+hexId+"): " + 
                    object.get(1)*8 + " " + object.get(2)*8 + " " + object.get(3) + "  ->  " + 
                    (object.get(1)*8 + getObjectDimensions(object.get(0))[0]) + " " + 
                    (object.get(2)*8 + getObjectDimensions(object.get(0))[1]) + " " + 
                    (object.get(3) + getObjectDimensions(object.get(0))[2]));
            data.addAll(object);
        }
        
        
        
        /*
        // Enemies:
        int nEnemies = Integer.parseInt(br.readLine().strip());
        data.add(nEnemies);
        for(int i = 0;i<nEnemies;i++) {
            line = br.readLine().strip();
            tokens = line.split(" ");
            switch(tokens[0]) {
                case "rat": data.add(1); break;
                default:
                    throw new Exception("unknown enemy type: " + tokens[0]);
            }
            data.add(Integer.parseInt(tokens[1]));  // x
            data.add(Integer.parseInt(tokens[2]));  // y
            data.add(Integer.parseInt(tokens[3]));  // z
            data.add(Integer.parseInt(tokens[4]));  // state
            data.add(Integer.parseInt(tokens[5]));  // state timer
        }
        */
        
        System.out.println(roomFileName + ": " + data.size());
        
        // Make sure we are not using too many different objects:
        int totalObjectSize = 0;
        for(String objectName:usedObjects) {
            File f = new File("src/autogenerated/objects/" + objectName + ".bin");
            long len = f.length();
            totalObjectSize += len + 1;
            System.out.println("    used object: " + objectName + " -> " + len + " + 1");
        }
        
        System.out.println("Space needed for object data buffer: " + totalObjectSize);
        if (totalObjectSize > MAX_OBJECT_SPACE) {
            throw new Exception("Too much object space used for room " + roomFileName);
        }

        return data;
    }
}
