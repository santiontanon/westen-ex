/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package westen;

import PNGtoMSX.ConvertPatternsToAssembler;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import util.Pletter;
import util.Z80Assembler;
import util.ZX0Wrapper;

/**
 *
 * @author santi
 */
public class Sprites {
    public static int TOLERANCE = 64;
    
    public static void main(String args[]) throws Exception
    {
//        String playerImageFileName = "data/player.png";
        String playerImageFileName = "data/player-beard.png";
        String enemiesImageFileName = "data/enemies.png";
        String outputFileName1 = "src/autogenerated/player-sprites";
        String outputFileName2 = "src/autogenerated/cutscene-sprites";
        
        ConvertPatternsToAssembler.MSX1Palette = Walls.MSX1Palette;
        
        BufferedImage img = ImageIO.read(new File(playerImageFileName));
        BufferedImage img2 = ImageIO.read(new File(enemiesImageFileName));

        // Player:
        {
            List<Integer> data = new ArrayList<>();

            // N, NE, E, SE, S, SW, W, NW:
            int x[] = {64, 64, 64, 64, 0,  0,  0,  0};
            int y[] = { 0, 32, 64, 96, 0, 32, 64, 96};

            for(int j = 0;j<8;j++) {
                for(int i = 0;i<3;i++) {
                    generatePlayerFrameData(x[j]+i*16, y[j], img, data);
                }
            }

            System.out.println("data: " + data.size());
            System.out.println("sprites: " + data.size()/32);

            Z80Assembler.dataToBinary(data, outputFileName1+".bin");    
            Pletter.intMain(new String[]{outputFileName1+".bin", outputFileName1+".plt"});
            ZX0Wrapper.main(outputFileName1+".bin", outputFileName1+".zx0", true, false);
        }
        
        // Lucy, John and Arthur:
        {
            List<Integer> data = new ArrayList<>();
            generateArthurFrameData(128, 0, img, data);
            
            generateJohnFrameData(144, 0, img, data);
            
            generateLucyFrameData(192, 32, img, data);
            generateLucyFrameData(208, 32, img, data);
            generateLucyFrameData(224, 32, img, data);

            generateLucyFrameData(128, 32, img, data);
//            generateLucyFrameData(144, 32, img, data);
//            generateLucyFrameData(160, 32, img, data);

            // conversion smoke:
            getSpriteWithColor(128, 64, img, 0, data);
            getSpriteWithColor(128, 64, img, 15, data);
            getSpriteWithColor(144, 64, img, 0, data);
            getSpriteWithColor(144, 64, img, 15, data);

            // bat:
            getSpriteWithColor(96, 0, img2, 0, data);
            getSpriteWithColor(96, 0, img2, 15, data);
            getSpriteWithColor(96, 16, img2, 0, data);
            getSpriteWithColor(96, 16, img2, 15, data);
            
            System.out.println(data);

            System.out.println("data: " + data.size());
            System.out.println("sprites: " + data.size()/32);

            Z80Assembler.dataToBinary(data, outputFileName2+".bin");    
            Pletter.intMain(new String[]{outputFileName2+".bin", outputFileName2+".plt"});
            ZX0Wrapper.main(outputFileName2+".bin", outputFileName2+".zx0", true, false);
        }
    }
    
    
    public static void generatePlayerFrameData(int x, int y, BufferedImage img, List<Integer> data)
    {
        // black sprites:
        getSpriteWithColor(x, y, img, 0, data);
        getSpriteWithColor(x, y+16, img, 0, data);

        // face sprites (yellow/red):
//        getSpriteWithColor(x, y+4, img, 11, data);
//        getSpriteWithColor(x, y+4, img, 6, data);
        getSpriteWithColor(x, y+1, img, 11, data);
        getSpriteWithColor(x, y+2, img, 6, data);
        
        // clothes sprites (blue/white):
        getSpriteWithColor(x, y+17, img, 5, data);
        getSpriteWithColor(x, y+20, img, 15, data);
    }
    
    
    public static void generateArthurFrameData(int x, int y, BufferedImage img, List<Integer> data)
    {
        // black sprites:
        getSpriteWithColor(x, y, img, 0, data);
        getSpriteWithColor(x, y+16, img, 0, data);

        // face sprite (yellow):
        getSpriteWithColor(x, y+8, img, 11, data);
        
        // clothes sprites (blue):
        getSpriteWithColor(x, y+16, img, 4, data);
    }
    
    
    public static void generateJohnFrameData(int x, int y, BufferedImage img, List<Integer> data)
    {
        // black sprites:
        getSpriteWithColor(x, y, img, 0, data);
        getSpriteWithColor(x, y+16, img, 0, data);

        // face sprites (white/red):
        getSpriteWithColor(x, y, img, 15, data);
        getSpriteWithColor(x, y, img, 9, data);
        
        // clothes sprites (white):
        getSpriteWithColor(x, y+16, img, 15, data);
    }    
    
    
    public static void generateLucyFrameData(int x, int y, BufferedImage img, List<Integer> data)
    {
        // black sprites:
        getSpriteWithColor(x, y, img, 0, data);
        getSpriteWithColor(x, y+16, img, 0, data);

        // face sprites (yellow/red):
        getSpriteWithColor(x, y+4, img, 11, data);
        getSpriteWithColor(x, y+4, img, 6, data);
        
        // clothes sprites (green):
        getSpriteWithColor(x, y+16, img, 2, data);
    }    
    
    
    public static void getSpriteWithColor(int x,int y, BufferedImage img, int color, List<Integer> data)
    {
        for(int k = 0;k<2;k++) {
            for(int i = 0;i<16;i++) {
                int pattern = 0;
                for(int j = 0;j<8;j++) {
                    int pixel = 0;
                    if (y+i<img.getHeight()) {
                        pixel = ConvertPatternsToAssembler.findMSXColor(x+k*8+j, y+i, img, TOLERANCE);
                    }
//                    System.out.println(pixel);
                    pattern *= 2;
                    if (pixel == color) pattern ++;
                }
//                System.out.println("");
                data.add(pattern);
            }
        }
    }

}
