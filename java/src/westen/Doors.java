/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package westen;

import PNGtoMSX.ConvertPatternsToAssembler;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import util.Pletter;
import util.Z80Assembler;
import util.ZX0Wrapper;

/**
 *
 * @author santi
 */
public class Doors {
    
    public static int TOLERANCE = 64;
    
    public static void main(String args[]) throws Exception
    {
        String doorsFileName = "data/doors.png";
        String doorsPath_output = "src/autogenerated/";
        
        ConvertPatternsToAssembler.MSX1Palette = Walls.MSX1Palette;
        
        generateDoorData(doorsFileName, 0, 0, 4, 8, doorsPath_output + "door-left-brick-stairs");
        generateDoorData(doorsFileName, 4, 0, 4, 8, doorsPath_output + "door-left-brick");
        generateDoorData(doorsFileName, 8, 0, 4, 8, doorsPath_output + "door-right-brick");
        generateDoorData(doorsFileName, 12, 0, 4, 8, doorsPath_output + "door-right-brick-stairs");
        generateDoorData(doorsFileName, 16, 0, 5, 3, doorsPath_output + "door-sw");
        generateDoorData(doorsFileName, 16, 3, 5, 3, doorsPath_output + "door-se");
        generateDoorData(doorsFileName, 0, 8, 4, 8, doorsPath_output + "door-left-bookshelf");
        generateDoorData(doorsFileName, 4, 8, 4, 8, doorsPath_output + "door-right-bookshelf");
        generateDoorData(doorsFileName, 8, 8, 4, 8, doorsPath_output + "door-right-entrance");

        generateDoorData(doorsFileName, 21, 0, 5, 3, doorsPath_output + "door-wood-sw");
        generateDoorData(doorsFileName, 21, 3, 5, 3, doorsPath_output + "door-wood-se");

        generateDoorData(doorsFileName, 12, 8, 4, 8, doorsPath_output + "door-wood-nw");
        generateDoorData(doorsFileName, 16, 8, 4, 8, doorsPath_output + "door-wood-ne");

        generateDoorData(doorsFileName, 20, 8, 4, 8, doorsPath_output + "door-victorian-tiles-nw");
        generateDoorData(doorsFileName, 24, 8, 4, 8, doorsPath_output + "door-victorian-tiles-ne");

        generateDoorData(doorsFileName, 26, 0, 4, 8, doorsPath_output + "door-gothic-nw");
        generateDoorData(doorsFileName, 30, 0, 4, 8, doorsPath_output + "door-gothic-ne");
        
        generateDoorData(doorsFileName, 34, 0, 5, 3, doorsPath_output + "door-gothic-sw");
        generateDoorData(doorsFileName, 34, 3, 5, 3, doorsPath_output + "door-gothic-se");
        
    }
    
    
    public static void generateDoorData(String doorsFileName, 
            int x, int y,
            int tile_width, int tile_height,
            String outputFileName) throws Exception
    {
        BufferedImage img = ImageIO.read(new File(doorsFileName));    
        
        List<List<Integer>> tiles = new ArrayList<>();
        int nameTable[][] = new int[tile_width][tile_height];
        
        // Add the empty tile first:
        {
            List<Integer> tmp = new ArrayList<>();
            for(int i = 0;i<16;i++) {
                tmp.add(0);
            }
            tiles.add(tmp);
        }
        
        
        List<Integer> data = new ArrayList<>();
        
        for(int i = 0;i<tile_height;i++) {
            for(int j = 0;j<tile_width;j++) {
                List<Integer> tileData = new ArrayList<>();
                tileData.addAll(ConvertPatternsToAssembler.generateAssemblerPatternBitmap(x+j, y+i, img, TOLERANCE));
                tileData.addAll(ConvertPatternsToAssembler.generateAssemblerPatternAttributes(x+j, y+i, img, TOLERANCE));
                
                int tile = Walls.findTile(tileData, tiles);
                if (tile == -1) {
                    tile = tiles.size();
                    tiles.add(tileData);
                }
                nameTable[j][i] = tile;
                data.add(tile);
                
                System.out.print(tile + "\t");
            }
            System.out.println("");
        }
        
        System.out.println("");
        
        tiles.remove(0);    // remove the empty tile
        
        // Generate data:
        for(List<Integer> tile:tiles) {
            data.addAll(tile);
        }
        
        int l = data.size();
        data.add(0, l/256);
        data.add(0, l%256);

        System.out.println("generateWallData, nTiles: " + tiles.size());
        System.out.println("generateWallData, data size: " + data.size());
        
        Z80Assembler.dataToBinary(data, outputFileName+".bin");    
        Pletter.intMain(new String[]{outputFileName+".bin", outputFileName+".plt"});
        ZX0Wrapper.main(outputFileName+".bin", outputFileName+".zx0", true, false);        
    }
}
