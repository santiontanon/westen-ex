/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package westen;

import PNGtoMSX.ConvertPatternsToAssembler;
import static westen.Walls.MSX1Palette;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import util.Pletter;
import util.Z80Assembler;
import util.ZX0Wrapper;

/**
 *
 * @author santi
 */
public class Floor {
    public static int TOLERANCE = 64;
    
    public static void main(String args[]) throws Exception
    {
        String floorFileName = "data/floor.png";
        String floorPath_output = "src/autogenerated/";
        
        ConvertPatternsToAssembler.MSX1Palette = MSX1Palette;
        
        generateFloorData(floorFileName, 0, 0, floorPath_output + "floor-blue-tiles-border");
//        generateFloorData(floorFileName, 8, 0, floorPath_output + "floor-blue-tiles");
        generateFloorData(floorFileName, 0, 4, floorPath_output + "floor-grass");
        generateFloorData(floorFileName, 8, 8, floorPath_output + "floor-wood");
//        generateFloorData(floorFileName, 0, 12, floorPath_output + "floor-white-tiles-border");
        generateFloorData(floorFileName, 0, 8, floorPath_output + "floor-white-tiles-border");
    }

    
    private static void generateFloorData(
            String floorFileName, int x, int y, 
            String outputFileName) throws Exception {
        BufferedImage img = ImageIO.read(new File(floorFileName));
        
        List<Integer> data = new ArrayList<>();
        getTilePatternData(img, x, y, data);    // blank
        getTilePatternData(img, x+2, y, data);
        getTilePatternData(img, x+3, y, data);
        getTilePatternData(img, x+4, y, data);
        getTilePatternData(img, x+5, y, data);
        getTilePatternData(img, x+2, y+1, data);
        getTilePatternData(img, x+3, y+1, data);
        getTilePatternData(img, x+4, y+1, data);
        getTilePatternData(img, x+5, y+1, data);
        getTilePatternData(img, x+2, y+3, data);
        getTilePatternData(img, x+3, y+3, data);
        getTilePatternData(img, x+4, y+3, data);
        getTilePatternData(img, x+5, y+3, data);        
        
        Z80Assembler.dataToBinary(data, outputFileName+".bin");
        Pletter.intMain(new String[]{outputFileName+".bin", outputFileName+".plt"});
        ZX0Wrapper.main(outputFileName+".bin", outputFileName+".zx0", true, false);
        
    }
    
    
    public static void getTilePatternData(BufferedImage img, 
            int tilex, int tiley, List<Integer> data) throws Exception
    {
        data.addAll(ConvertPatternsToAssembler.generateAssemblerPatternBitmap(tilex, tiley, img, TOLERANCE));
        data.addAll(ConvertPatternsToAssembler.generateAssemblerPatternAttributes(tilex, tiley, img, TOLERANCE));
        // Make sure no tile is completely dark (so, enemies and bullets can be seen):
        for(int i = 0;i<8;i++) {
            int attribute = data.get((data.size()-8)+i);
            if (attribute == 0) {
                if (i == 0) {
                    data.set((data.size()-8)+i, 4*16);
                } else {
                    data.set((data.size()-8)+i, data.get((data.size()-8)+i-1));
                }
            }
        }
    }
}
