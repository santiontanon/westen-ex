/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package westen;

import PNGtoMSX.ConvertPatternsToAssembler;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.imageio.ImageIO;

/**
 *
 * @author santi
 */
public class RenderMap {    
    public static int SCREEN_HEIGHT = 19;
    public static int SCREEN_WIDTH = 32;
    
    public static void main(String args[]) throws Exception
    {
//        generateIndividualRooms(args);
        generateFloorMaps(args);
    }
    
    
    public static void generateIndividualRooms(String args[]) throws Exception
    {
        int x_spacing = 256+8;
        int y_spacing = 192+8;
        int width = x_spacing*8;
        int height = y_spacing*7;
        BufferedImage mapImage = new BufferedImage(width, height, BufferedImage.TYPE_4BYTE_ABGR);
        
        String rooms[] = {
            // part 1:
            "data/rooms/part1/room0.txt",
            "data/rooms/part1/room1.txt",
            "data/rooms/part1/room2-lobby.txt",
            "data/rooms/part1/room3.txt",
            "data/rooms/part1/room4.txt",
            "data/rooms/part1/room5-dining.txt",
            "data/rooms/part1/room6.txt",
            "data/rooms/part1/room7-library.txt",
            "data/rooms/part1/room8-kitchen.txt",
            "data/rooms/part1/room9-storage.txt",
            "data/rooms/part1/room10.txt",
            "data/rooms/part1/room11-backyard.txt",
            // part 2:
            "data/rooms/part2/room16.txt",
            "data/rooms/part2/room17-music.txt",
            "data/rooms/part2/room18-bath.txt",
            "data/rooms/part2/room19.txt",
            "data/rooms/part2/room20-writing.txt",
            "data/rooms/part2/room21.txt",
            "data/rooms/part2/room22-closet.txt",
            "data/rooms/part2/room23.txt",
            "data/rooms/part2/room24-ritual.txt",
            // part 3:
            "data/rooms/part3/room32.txt",
            "data/rooms/part3/room33.txt",
            "data/rooms/part3/room34.txt",
            "data/rooms/part3/room35-vampire1.txt",
            "data/rooms/part3/room36.txt",
            "data/rooms/part3/room37.txt",
            "data/rooms/part3/room38.txt",
            "data/rooms/part3/room39.txt",
            "data/rooms/part3/room40-chapel.txt",
            "data/rooms/part3/room41.txt",
            "data/rooms/part3/room42-vampire3.txt",
            "data/rooms/part3/room43-workshop.txt",
            "data/rooms/part3/room44-feeding.txt",
            "data/rooms/part3/room45-vampire2.txt",
            "data/rooms/part3/room46.txt", 
            // part 4:
            "data/rooms/part4/room48.txt",
            "data/rooms/part4/room49.txt",
            "data/rooms/part4/room50.txt",
            "data/rooms/part4/room51-bath.txt",
            "data/rooms/part4/room52-bedroom1.txt",
            "data/rooms/part4/room53-bedroom2.txt",
            "data/rooms/part4/room54-bedroom3.txt",
            "data/rooms/part4/room55-bath.txt",
            "data/rooms/part4/room56-bedroom4.txt",
            "data/rooms/part4/room57-bath.txt",
            "data/rooms/part4/room58-bedroom5.txt",
            "data/rooms/part4/room59-bath.txt",
            "data/rooms/part4/room60.txt",
            "data/rooms/part4/room61-lab.txt"
        };
        for(int i = 0;i<rooms.length;i++) {
            int x = (i%8) * x_spacing;
            int y = (i/8) * y_spacing;
            renderRoom(rooms[i], x, y, mapImage, false);
        }
        
        ImageIO.write(mapImage, "png", new File("autogenerated-map.png"));
    }
    
    
    public static void generateFloorMaps(String args[]) throws Exception
    {
        String roomsFloor1[] = {
            "data/rooms/part1/room0.txt," + 1 + "," + 35,
            "data/rooms/part1/room1.txt," + 2 + "," + 20,
            "data/rooms/part1/room2-lobby.txt," + 0 + "," + 0,
            "data/rooms/part1/room3.txt," + 21 + "," + 10,
            "data/rooms/part1/room4.txt," + 21 + "," + -4,
            "data/rooms/part1/room5-dining.txt," + 41 + "," + 9,
            "data/rooms/part1/room6.txt," + 48 + "," + -10,
            "data/rooms/part1/room7-library.txt," + 23 + "," + -21,
            "data/rooms/part1/room8-kitchen.txt," + 43 + "," + -27,
            "data/rooms/part1/room9-storage.txt," + 65 + "," + -22,
            "data/rooms/part1/room11-backyard.txt," + 44 + "," + -45,

            "data/rooms/part2/room16.txt," + -21 + "," + 2,
            "data/rooms/part2/room17-music.txt," + -44 + "," + 2,
            "data/rooms/part2/room18-bath.txt," + -14 + "," + -10,
            "data/rooms/part2/room19.txt," + -24 + "," + -15,
            "data/rooms/part2/room20-writing.txt," + -28 + "," + -32,
            "data/rooms/part2/room21.txt," + -45 + "," + -17,
            "data/rooms/part2/room22-closet.txt," + -50 + "," + -34,
            "data/rooms/part2/room23.txt," + -38 + "," + -34,
            "data/rooms/part2/room24-ritual.txt," + -41 + "," + -52,
        };
        
        String roomsFloor2[] = {
            "data/rooms/part1/room10.txt," + 0 + "," + 0,
            "data/rooms/part4/room48.txt," + -2 + "," + -19,
            "data/rooms/part4/room49.txt," + -2 + "," + -45,
            "data/rooms/part4/room50.txt," + 19 + "," + -23,
            "data/rooms/part4/room51-bath.txt," + 12 + "," + -10,
            "data/rooms/part4/room52-bedroom1.txt," + -17 + "," + -14,
            "data/rooms/part4/room53-bedroom2.txt," + -17 + "," + -34,
            "data/rooms/part4/room54-bedroom3.txt," + -17 + "," + -52,
            "data/rooms/part4/room55-bath.txt," + -19 + "," + -68,
            "data/rooms/part4/room56-bedroom4.txt," + -3 + "," + -66,
            "data/rooms/part4/room57-bath.txt," + 13 + "," + -65,
            "data/rooms/part4/room58-bedroom5.txt," + 26 + "," + -40,
            "data/rooms/part4/room59-bath.txt," + 12 + "," + -38,
            "data/rooms/part4/room60.txt," + 44 + "," + -25,

            "data/rooms/part4/room61-lab.txt," + -50 + "," + -130,
        };

        String roomsBasement[] = {
            "data/rooms/part3/room32.txt," + 0 + "," + 0,
            "data/rooms/part3/room33.txt," + 22 + "," + 1,
            "data/rooms/part3/room34.txt," + 40 + "," + 0,
            "data/rooms/part3/room35-vampire1.txt," + 41 + "," + 22,
            "data/rooms/part3/room36.txt," + 40 + "," + -23,
            "data/rooms/part3/room37.txt," + 63 + "," + -23,
            "data/rooms/part3/room38.txt," + 63 + "," + 0,
            "data/rooms/part3/room39.txt," + 41 + "," + -44,
            "data/rooms/part3/room40-chapel.txt," + 34 + "," + -65,
            "data/rooms/part3/room41.txt," + 45 + "," + -82,
            "data/rooms/part3/room42-vampire3.txt," + 54 + "," + -65,
            "data/rooms/part3/room43-workshop.txt," + 64 + "," + -45,
            "data/rooms/part3/room44-feeding.txt," + 85 + "," + 0,
            "data/rooms/part3/room45-vampire2.txt," + 86 + "," + -23,
            "data/rooms/part3/room46.txt," + 70 + "," + 22, 
            
        };
        
        BufferedImage mapImage = new BufferedImage(1400, 1024, BufferedImage.TYPE_4BYTE_ABGR);
        for(String pattern:roomsFloor1) {
            String tokens[] = pattern.split(",");
            int x = 384 + (Integer.parseInt(tokens[1]) - Integer.parseInt(tokens[2])) * 8;
            int y = 512 + (Integer.parseInt(tokens[1]) + Integer.parseInt(tokens[2])) * 4;
            renderRoom(tokens[0], x, y, mapImage, true);
        }
        ImageIO.write(mapImage, "png", new File("autogenerated-map-floor1.png"));

        mapImage = new BufferedImage(1400, 1024, BufferedImage.TYPE_4BYTE_ABGR);
        for(String pattern:roomsFloor2) {
            String tokens[] = pattern.split(",");
            int x = 384 + (Integer.parseInt(tokens[1]) - Integer.parseInt(tokens[2])) * 8;
            int y = 768 + (Integer.parseInt(tokens[1]) + Integer.parseInt(tokens[2])) * 4;
            renderRoom(tokens[0], x, y, mapImage, true);
        }
        ImageIO.write(mapImage, "png", new File("autogenerated-map-floor2.png"));

        mapImage = new BufferedImage(1400, 1024, BufferedImage.TYPE_4BYTE_ABGR);
        for(String pattern:roomsBasement) {
            String tokens[] = pattern.split(",");
            int x = 32 + (Integer.parseInt(tokens[1]) - Integer.parseInt(tokens[2])) * 8;
            int y = 256 + (Integer.parseInt(tokens[1]) + Integer.parseInt(tokens[2])) * 4;
            renderRoom(tokens[0], x, y, mapImage, true);
        }
        ImageIO.write(mapImage, "png", new File("autogenerated-map-basement.png"));
    }    
    
    
    public static void renderRoom(String roomPath, int startx, int starty, BufferedImage img, boolean transparent) throws Exception
    {
//        BufferedImage roomImage = new BufferedImage(256, 152, BufferedImage.TYPE_4BYTE_ABGR);
        BufferedImage roomImage = new BufferedImage(256, 192, BufferedImage.TYPE_4BYTE_ABGR);
        WestenRoom room = new WestenRoom(roomPath);
        room.render(0, 40, roomImage);        
        for(int i = 0;i<192;i++) {
            for(int j = 0;j<256;j++) {
                int color = roomImage.getRGB(j, i);
                if (transparent) {
                    if ((color & 0x00ffffff) != 0) {
                        img.setRGB(j + startx, i + starty, color);
                    }
                } else {
                    if ((color & 0xff000000) != 0xff000000) color = 0xff000000;
                    img.setRGB(j + startx, i + starty, color);
                }
            }
        }
        
    }
    
    
    public static void renderTile(BufferedImage sourceImg, int sx0, int sy0, int sw, int sh,
                           BufferedImage targetImg, int tx0, int ty0)
    {
        for(int i = 0;i<sh;i++) {
            for(int j = 0;j<sw;j++) {
                int color = sourceImg.getRGB(sx0+j, sy0+i);
                int alpha = (color & 0xff000000) >> 24;
                if (alpha == -1) {
                    if (tx0 + j >= 0 && ty0 +i >= 0) {
                        targetImg.setRGB(tx0 + j, ty0 + i, color);
                    }
                }
            }
        }
    }
    

    public static String canonicalType(String type) {
        switch(type) {
            case "door-right-white":
            case "door-right-yellow":
            case "door-right-blue":
            case "door-right-green":
            case "door-ritual":
                return "door-right";
            case "door-left-red":
            case "door-left-yellow":
                return "door-left";
            case "painting-safe-right":
                return "painting-right";
            case "crate-garlic1":
            case "crate-garlic2":
            case "crate-garlic3":
            case "crate-stake1":
            case "crate-stake2":
            case "crate-stake3":
                return "crate-breakable";
            case "heart1":
            case "heart2":
            case "heart3":
            case "heart4":
                return "heart";
            case "door-vampire1":
            case "door-vampire2":
            case "door-vampire3":
                return "door-vampire-right";
            case "book-westenra":
                return "book";

            case "open-grave":
            case "clay":
            case "chest-reveal":
            case "chest-reveal-2":
            case "lucy-torn-note":
                return null;
        }
        return type;
    }
    
    
    public static class WestenDoor {
        String type;
        int position, h;
        
        
        public WestenDoor(String []tokens) {
            type = tokens[0];
            position = Integer.parseInt(tokens[1]);
            h = Integer.parseInt(tokens[2]) * 8;
        }
        
        
        public void draw(int startx, int starty, BufferedImage img, WestenRoom room) throws Exception
        {
            BufferedImage doorsImg = ImageIO.read(new File("data/doors.png"));
            
            switch(type) {
                case "door-empty-sw":
                case "door-empty-ne":
                    break;
                    
                case "door-right-entrance":
                {
                    renderTile(doorsImg, 64, 64, 4*8, 6*8, img,
                               startx + room.start_tile_x*8 + (position - 1)*8,
                               starty + room.start_tile_y*8 + (position - 1)*4 - h - 6*8);
                    break;
                }
                
                case "door-wood-sw":
                {
                    int x = position - 2;
                    int y = room.width_y;
                    renderTile(doorsImg, 168, 0, 2*8, 2*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8,
                               starty + room.start_tile_y*8 + (x + y)*4 - h);
                    renderTile(doorsImg, 184, 8, 2*8, 1*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8 + 16,
                               starty + room.start_tile_y*8 + (x + y)*4 - h + 8);
                    renderTile(doorsImg, 192, 16, 2*8, 1*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8 + 24,
                               starty + room.start_tile_y*8 + (x + y)*4 - h + 16);
                    break;
                }

                case "door-wood-nw":
                {
                    int x = 0;
                    int y = position + 1;
                    renderTile(doorsImg, 96, 72, 4*8, 6*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8,
                               starty + room.start_tile_y*8 + (x + y)*4 - h - 56);
                    renderTile(doorsImg, 96, 120, 2*8, 1*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8,
                               starty + room.start_tile_y*8 + (x + y)*4 - h - 8);
                    break;
                }

                case "door-wood-ne":
                {
                    int x = position - 1;
                    int y = 0;
                    renderTile(doorsImg, 128, 72, 4*8, 6*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8,
                               starty + room.start_tile_y*8 + (x + y)*4 - h - 40);
                    renderTile(doorsImg, 144, 120, 2*8, 1*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8 + 16,
                               starty + room.start_tile_y*8 + (x + y)*4 - h + 8);
                    break;
                }

                case "door-wood-se":
                {
                    int x = room.width_x;
                    int y = position - 2;
                    renderTile(doorsImg, 192, 24, 2*8, 2*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8,
                               starty + room.start_tile_y*8 + (x + y)*4 - h - 8);
                    renderTile(doorsImg, 176, 32, 2*8, 1*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8 - 16,
                               starty + room.start_tile_y*8 + (x + y)*4 - h);
                    renderTile(doorsImg, 168, 40, 2*8, 1*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8 - 24,
                               starty + room.start_tile_y*8 + (x + y)*4 - h + 8);
                    break;
                }
                
                case "door-sw":
                {
                    int x = position - 2;
                    int y = room.width_y;
                    renderTile(doorsImg, 128, 0, 2*8, 2*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8,
                               starty + room.start_tile_y*8 + (x + y)*4 - h);
                    renderTile(doorsImg, 152, 16, 2*8, 1*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8 + 24,
                               starty + room.start_tile_y*8 + (x + y)*4 - h + 16);
                    break;
                }         
                
                case "door-se":
                {
                    int x = room.width_x;
                    int y = position - 2;
                    renderTile(doorsImg, 152, 24, 2*8, 2*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8,
                               starty + room.start_tile_y*8 + (x + y)*4 - h - 8);
                    renderTile(doorsImg, 128, 40, 2*8, 1*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8 - 24,
                               starty + room.start_tile_y*8 + (x + y)*4 - h + 8);
                    break;
                }
                
                case "door-victorian-tiles-nw":
                {
                    int x = 0;
                    int y = position + 1;
                    renderTile(doorsImg, 160, 72, 4*8, 6*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8,
                               starty + room.start_tile_y*8 + (x + y)*4 - h - 56);
                    renderTile(doorsImg, 160, 120, 1*8, 1*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8,
                               starty + room.start_tile_y*8 + (x + y)*4 - h - 8);
                    break;
                }
                
                
                case "door-victorian-tiles-ne":
                {
                    int x = position - 1;
                    int y = 0;
                    renderTile(doorsImg, 192, 72, 4*8, 6*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8,
                               starty + room.start_tile_y*8 + (x + y)*4 - h - 40);
                    renderTile(doorsImg, 216, 120, 8, 1*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8 + 24,
                               starty + room.start_tile_y*8 + (x + y)*4 - h + 8);
                    break;
                }
                
                case "door-left-brick-stairs":
                {
                    int x = 0;
                    int y = position + 1;
                    renderTile(doorsImg, 0, 0, 4*8, 6*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8,
                               starty + room.start_tile_y*8 + (x + y)*4 - h - 60);
                    renderTile(doorsImg, 0, 48, 2*8, 1*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8,
                               starty + room.start_tile_y*8 + (x + y)*4 - h - 12);                    
                    renderTile(doorsImg, 0, 56, 1*8, 1*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8,
                               starty + room.start_tile_y*8 + (x + y)*4 - h - 4);                    
                    break;
                }
                
                case "door-left-brick":
                {
                    int x = 0;
                    int y = position + 1;
                    renderTile(doorsImg, 32, 0, 4*8, 6*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8,
                               starty + room.start_tile_y*8 + (x + y)*4 - h - 60);
                    renderTile(doorsImg, 32, 48, 2*8, 1*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8,
                               starty + room.start_tile_y*8 + (x + y)*4 - h - 12);                    
                    renderTile(doorsImg, 32, 56, 1*8, 1*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8,
                               starty + room.start_tile_y*8 + (x + y)*4 - h - 4);                    
                    break;
                }
                
                case "door-right-brick":
                {
                    int x = position - 1;
                    int y = 0;
                    renderTile(doorsImg, 64, 0, 4*8, 6*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8,
                               starty + room.start_tile_y*8 + (x + y)*4 - h - 44);
                    renderTile(doorsImg, 80, 48, 2*8, 1*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8 + 16,
                               starty + room.start_tile_y*8 + (x + y)*4 - h + 4);
                    renderTile(doorsImg, 88, 56, 1*8, 1*8, img,
                               startx + room.start_tile_x*8 + (x - y)*8 + 24,
                               starty + room.start_tile_y*8 + (x + y)*4 - h + 12);
                    break;
                }
                                
                default:
                    throw new Exception("unimplemented door type: " + type);
            }
        }
    }

    
    public static class WestenObject {
        String type;
        int x, y, h;
        
        public WestenObject(String tokens[]) {
            type = tokens[0];
            x = Integer.parseInt(tokens[1]);
            y = Integer.parseInt(tokens[2]);
            h = Integer.parseInt(tokens[3]);
            if (h >= 128) h -= 256;
        }
        
        
        public void draw(int startx, int starty, BufferedImage img, WestenRoom room) throws Exception
        {   
            if (type.equals("rat") ||
                type.equals("spider") ||
                type.equals("slime")) {
                drawEnemy(startx, starty, img, room);
                return;
            }
            
            String objectFileName = canonicalType(type);
            if (objectFileName == null) return;
            
            objectFileName = "src/autogenerated/objects/" + objectFileName + ".bin";
            FileInputStream fis = new FileInputStream(objectFileName);
            
            fis.read();  // skip object size
            fis.read();  // skip object size
            int width = fis.read();
            int height = fis.read();
            fis.read();  // skip object width
            fis.read();  // skip object height
            fis.read();  // skip object z height
            int xoffset = fis.read();
            int yoffset = fis.read();
            
            if (xoffset >= 128) xoffset -=256;
            if (yoffset >= 128) yoffset -=256;
            
            int screen_x = room.start_tile_x*8;
            int screen_y = (room.start_tile_y - 2)*8;
            screen_x += x*8 - y*8;
            screen_y += (x + y)*4 - h;
            screen_x -= xoffset*8;
            screen_y -= yoffset*8;
            
//            System.out.println(type + "," + width + ", " + height + "," + xoffset + "," + yoffset);
            
            for(int j = 0;j<width;j++) {
                for(int i = 0;i<height*8;i++) {
                    // read and draw a tile row:
                    int andMask = fis.read();
                    int orMask = fis.read();
                    int attributes = fis.read() >> 4;
                    
                    // Apply and mask (setting pixels to black):
                    for(int k = 0;k<8;k++) {
                        if ((andMask & 0x01) == 0) {
                            ConvertPatternsToAssembler.setMSXColorSafe(img,
                                    startx + screen_x + j*8 + 7 - k,
                                    starty + screen_y + i, 0);
                        }
                        andMask /= 2;
                    }
                    // Apply or mask:
                    for(int k = 0;k<8;k++) {
                        if ((orMask & 0x01) == 1) {
                            ConvertPatternsToAssembler.setMSXColorSafe(img,
                                    startx + screen_x + j*8 + 7 - k,
                                    starty + screen_y + i, attributes);
                        }
                        orMask /= 2;
                    }
                }
            }
        }


        public void drawEnemy(int startx, int starty, BufferedImage img, WestenRoom room) throws Exception
        {   
            BufferedImage enemiesImg = ImageIO.read(new File("data/enemies.png"));
            int screen_x = startx + room.start_tile_x*8;
            int screen_y = starty + (room.start_tile_y - 2)*8;
            screen_x += x*8 - y*8 - 8;
            screen_y += (x + y)*4 - h - 8;

            switch(type) {
                case "rat":
                    renderTile(enemiesImg, 0, 0, 16, 16,
                               img, screen_x, screen_y);
                    break;
                case "spider":
                    renderTile(enemiesImg, 32, 0, 16, 16,
                               img, screen_x, screen_y);
                    break;
                case "slime":
                    renderTile(enemiesImg, 64, 0, 16, 16,
                               img, screen_x, screen_y);
                    break;
            }
        }    
    }
    
    
    

    public static class WestenRoom {
        String roomPath;
        int start_tile_x, start_tile_y;
        int width_x, width_y;
        String floor;
        String walls;
        List<WestenDoor> doors = new ArrayList<>();
        List<WestenObject> objects = new ArrayList<>();
        
        public WestenRoom(String path) throws Exception {
            roomPath = path;
            BufferedReader br = new BufferedReader(new FileReader(path));
            String line = br.readLine();
            String tokens[] = line.split(" ");
            start_tile_x = Integer.parseInt(tokens[0]);
            start_tile_y = Integer.parseInt(tokens[1]);
            width_x = Integer.parseInt(tokens[2]);
            width_y = Integer.parseInt(tokens[3]);
            
            line = br.readLine();
            floor = line.strip();

            line = br.readLine();
            walls = line.strip();
            
            line = br.readLine();
            int nDoors = Integer.parseInt(line.strip());
            for(int i = 0;i<nDoors;i++) {
                line = br.readLine();
                tokens = line.split(" ");
                doors.add(new WestenDoor(tokens));
            }

            line = br.readLine();
            int nObjects = Integer.parseInt(line.strip());
            for(int i = 0;i<nObjects;i++) {
                line = br.readLine();
                tokens = line.split(" ");
                objects.add(new WestenObject(tokens));
            }
        }
        
        
        public void render(int startx, int starty, BufferedImage img) throws Exception
        {
            renderFloor(startx, starty, img);
            renderWalls(startx, starty, img);
            renderDoors(startx, starty, img);
            renderObjects(startx, starty, img);
        }


        public void renderFloor(int startx, int starty, BufferedImage img) throws Exception
        {
            BufferedImage floorImg = ImageIO.read(new File("data/floor.png"));

            // clear room:
            for(int i = SCREEN_HEIGHT;i>0;i--) {
                for(int j = SCREEN_WIDTH;j>0;j--) {
                    renderTile(floorImg, 0, 0, 8, 8,
                               img, startx + (SCREEN_WIDTH - j) * 8, starty + (SCREEN_HEIGHT - i) *8);                    
                }
            }
            
            switch(floor) {
                case "grass":
                {
                    if (width_y == 14) {
                        // entrance:
                        start_tile_x -= 2;
                        start_tile_y += 1;
                        renderFloorInternal(floorImg, 0, 32,
                                            0, 0, 4, 12,
                                            startx, starty, img);
                        renderFloorInternal(floorImg, 0, 32,
                                            8, 0, 4, 12,
                                            startx, starty, img);
                        start_tile_x += 2;
                        start_tile_y -= 1;
                    } else {
                        renderFloorInternal(floorImg, 0, 32,
                                            0, 0, 4, width_y,
                                            startx, starty, img);
                        renderFloorInternal(floorImg, 0, 32,
                                            8, 0, 4, width_y,
                                            startx, starty, img);
                    }
                    break;
                }
                
                case "wood":
                {
                    renderFloorInternal(floorImg, 64, 64,
                                        0, 0,width_x, width_y,
                                        startx, starty, img);
                    break;
                }
                
                case "blue_tiles_border":
                {
                    renderFloorInternal(floorImg, 0, 0,
                                        0, 0,width_x, width_y,
                                        startx, starty, img);
                    break;
                }
                
                default:
                    throw new Exception("Unimplemented floor type " + floor);
            }
        }
        
        
        public void renderFloorInternal(BufferedImage floorImg, int patternx, int patterny,
                                        int roomx, int roomy, int roomWidth, int roomHeight,
                                        int startx, int starty, BufferedImage img)
        {
            for(int i = SCREEN_HEIGHT;i>0;i--) {
                for(int j = SCREEN_WIDTH;j>0;j--) {
                    int tile = 7;
                    int isox = ((32-j)-start_tile_x) + ((19-i)-start_tile_y)*2;
                    int isoy = ((19-i)-start_tile_y)*2 - ((32-j)-start_tile_x);
                    isox -= roomx * 2;
                    isoy -= roomy * 2;
                    tile = 13-(((j+start_tile_x-1) + ((i+start_tile_y-19)%2)*2)%4);
                    if (isox  < -2) tile = 0;
                    if (isox == -1) tile = 3;
                    if (isox == -2) tile = 2;
                    if (isox >= roomWidth*2) tile = 0;
                    if (isox == roomWidth*2-1) tile = 23;
                    if (isox == roomWidth*2-2) tile = 22;
                    if (isoy < -1) tile = 0;
                    if (isoy ==  0 && tile != 0) tile = 4;
                    if (isoy == -1 && tile != 0) tile = 5;
                    if (isoy > roomHeight*2) tile = 0;
                    if (isoy == roomHeight*2 && tile != 0) tile = 16;
                    if (isoy == roomHeight*2-1 && tile != 0) tile = 17;

                    int tile_img_x = patternx + (tile%8) * 8;
                    int tile_img_y = patterny + (tile/8) * 8;
                    if (tile > 0) {
                        renderTile(floorImg, tile_img_x, tile_img_y, 8, 8,
                                   img, startx + (SCREEN_WIDTH - j) * 8, starty + (SCREEN_HEIGHT - i) *8);                    
                    }
                }
            }
        }
        
        
        public void renderWalls(int startx, int starty, BufferedImage img) throws Exception
        {
            BufferedImage wallImg = ImageIO.read(new File("data/walls.png"));
            ConvertPatternsToAssembler.MSX1Palette = Walls.MSX1Palette;
            
            if (walls.equals("victorian-tiles")) {
                // change wood color:
                for(int i = 80;i<96;i++) {
                    for(int j = 88; j<120; j++) {
                        int color = ConvertPatternsToAssembler.findMSXColor(j, i, wallImg, 32);
                        if (color == 6) {
                            // change to blue:
                            ConvertPatternsToAssembler.setMSXColor(wallImg, j, i, 4);
                        }
                    }
                }
                walls = "victorian";
            } else if (walls.equals("victorian-blue")) {
                // change wood color:
                for(int i = 48;i<88;i++) {
                    for(int j = 88; j<120; j++) {
                        int color = ConvertPatternsToAssembler.findMSXColor(j, i, wallImg, 32);
                        if (color == 14) {
                            // change to blue:
                            ConvertPatternsToAssembler.setMSXColor(wallImg, j, i, 4);
                        }
                    }
                }
                walls = "victorian";
            }
            
            switch(walls) {
                case "no-wall":
                    break;

                case "entrance":
                {
                    drawWallColumn(wallImg, 80,       0 + 2*8, 6 - 2, startx + 15*8, starty + 0, img);
                    drawWallColumn(wallImg, 80 + 1*8, 0 + 2*8, 6 - 2, startx + 16*8, starty + 0, img);
                    drawWallColumn(wallImg, 80 + 2*8, 0 + 1*8, 6 - 1, startx + 17*8, starty + 0, img);
                    drawWallColumn(wallImg, 80 + 3*8, 0 + 1*8, 6 - 1, startx + 18*8, starty + 0, img);
                    drawWallColumn(wallImg, 80 + 2*8, 0      , 6    , startx + 19*8, starty + 0, img);

                    drawWallColumn(wallImg, 80 + 3*8, 0      , 6    , startx + 24*8, starty + 2*8, img);

                    drawWallColumn(wallImg, 80 + 2*8, 0      , 6    , startx + 25*8, starty + 3*8, img);
                    drawWallColumn(wallImg, 80 + 3*8, 0      , 6    , startx + 26*8, starty + 3*8, img);
                    drawWallColumn(wallImg, 80      , 0      , 6    , startx + 27*8, starty + 4*8, img);
                    drawWallColumn(wallImg, 80 + 1*8, 0      , 6    , startx + 28*8, starty + 4*8, img);
                    break;
                }
                
                case "victorian":
                {
                    // nw wall:
                    for(int i = 0;i<width_y;i++) {
                        int x = start_tile_x - 1 - i;
                        int y = start_tile_y + 1 + i/2 - 6;
                        int ntiles = 6;
                        int y_offset = 0;
                        int column = (i+1)%2;
                        while(y < 0) {
                            y++;
                            ntiles--;
                            y_offset++;
                        }
                        drawWallColumn(wallImg, 88 + column*8, 48 + y_offset*8, ntiles, startx + x*8, starty + y * 8, img);
                    }
                    // ne wall:
                    for(int i = 0;i<width_x;i++) {
                        int x = start_tile_x + i;
                        int y = start_tile_y + 1 + i/2 - 6;
                        int ntiles = 6;
                        int y_offset = 0;
                        int column = 2 + (i%2);
                        while(y < 0) {
                            y++;
                            ntiles--;
                            y_offset++;
                        }
                        drawWallColumn(wallImg, 88 + column*8, 48 + y_offset*8, ntiles, startx + x*8, starty + y * 8, img);
                    }
                    break;
                }
                
                case "bookshelves":
                {
                    // nw wall:
                    for(int i = 0;i<width_y+1;i++) {
                        int x = start_tile_x - 1 - i;
                        int y = start_tile_y + 2 + (i/4)*2 - 6;
                        if (i == width_y) {
                            drawWallColumn(wallImg, 160, 8, 5, startx + x*8, starty + (y - 1) * 8, img);
                        } else {
                            int ntiles = 6;
                            int y_offset = 0;
                            int column = 3-(i%4);
                            if (column == 2 || column == 3) ntiles = 5;
                            while(y < 0) {
                                y++;
                                ntiles--;
                                y_offset++;
                            }
                            drawWallColumn(wallImg, 168 + column*8, 0 + y_offset*8, ntiles, startx + x*8, starty + y * 8, img);
                            if (column == 3 && i != 0 && y > 0) {
                                renderTile(wallImg, 160, 8, 8, 8,
                                           img, startx + x*8, starty + (y - 1) * 8);
                            }
                        }
                    }
                    
                    // ne wall:
                    for(int i = 0;i<width_x+1;i++) {
                        int x = start_tile_x + i;
                        int y = start_tile_y + 2 + (i/4)*2 - 6;
                        if (i == width_x) {
                            drawWallColumn(wallImg, 232, 8, 5, startx + x*8, starty + (y - 1) * 8, img);
                        } else {
                            int ntiles = 6;
                            int y_offset = 0;
                            int column = 4+(i%4);
                            if (column == 4 || column == 5) ntiles = 5;
                            while(y < 0) {
                                y++;
                                ntiles--;
                                y_offset++;
                            }
                            drawWallColumn(wallImg, 168 + column*8, 0 + y_offset*8, ntiles, startx + x*8, starty + y * 8, img);
                            if (column == 4 && i != 0 && y > 0) {
                                renderTile(wallImg, 232, 8, 8, 8,
                                           img, startx + x*8, starty + (y - 1) * 8);
                            }
                        }
                    }                    
                    break;
                }
                
                case "blue_bricks":
                {
                    // nw wall:
                    drawWallColumn(wallImg, 8, 64, 4,
                                   startx + start_tile_x * 8 - width_y*8,
                                   starty + start_tile_y * 8 + (width_y/2 - 4)*8, img);
                    drawWallColumn(wallImg, 32, 48, 5,
                                   startx + start_tile_x * 8 - 1*8,
                                   starty + start_tile_y * 8 - 4*8, img);
                    for(int i = 4;i<width_y-2;i+=8) {
                        int x = start_tile_x - 1 - i;
                        int y = start_tile_y + 2 + (i/4)*2 - 4;
                        drawWallColumn(wallImg, 24, 64, 2, startx + x*8, starty + y * 8, img);
                        drawWallColumn(wallImg, 16, 64, 2, startx + x*8 - 8, starty + y * 8, img);
                    }

                    // ne wall:
                    drawWallColumn(wallImg, 40, 48, 5,
                                   startx + start_tile_x * 8,
                                   starty + start_tile_y * 8 - 4*8, img);
                    drawWallColumn(wallImg, 64, 64, 4,
                                   startx + start_tile_x * 8 + (width_x - 1)*8,
                                   starty + start_tile_y * 8 + (width_x/2 - 4)*8, img);
                    for(int i = width_x-6;i>=2;i-=8) {
                        int x = start_tile_x + i;
                        int y = start_tile_y + 2 + (i/2) - 4;
                        drawWallColumn(wallImg, 48, 64, 2, startx + x*8, starty + y * 8, img);
                        drawWallColumn(wallImg, 56, 64, 2, startx + x*8 + 8, starty + y * 8, img);
                    }
                    
                    
                    break;
                }
                
                case "blue_bricks_shelves":
                {
                    // nw wall:
                    drawWallColumn(wallImg, 8, 64, 4,
                                   startx + start_tile_x * 8 - width_y*8,
                                   starty + start_tile_y * 8 + (width_y/2 - 4)*8, img);
                    drawWallColumn(wallImg, 32, 48, 5,
                                   startx + start_tile_x * 8 - 1*8,
                                   starty + start_tile_y * 8 - 4*8, img);
                    for(int i = 4;i<width_y-2;i+=8) {
                        int x = start_tile_x - 1 - i;
                        int y = start_tile_y + 2 + (i/4)*2 - 4;
                        drawWallColumn(wallImg, 24, 64, 2, startx + x*8, starty + y * 8, img);
                        drawWallColumn(wallImg, 16, 64, 2, startx + x*8 - 8, starty + y * 8, img);
                    }

                    // ne wall:
                    for(int i = 0;i<width_x+1;i++) {
                        int x = start_tile_x + i;
                        int y = start_tile_y + 2 + (i/4)*2 - 6;
                        if (i == width_x) {
                            drawWallColumn(wallImg, 232, 56, 5, startx + x*8, starty + (y - 1) * 8, img);
                        } else {
                            int ntiles = 6;
                            int y_offset = 0;
                            int column = 4+(i%4);
                            if (column == 4 || column == 5) ntiles = 5;
                            while(y < 0) {
                                y++;
                                ntiles--;
                                y_offset++;
                            }
                            drawWallColumn(wallImg, 168 + column*8, 48 + y_offset*8, ntiles, startx + x*8, starty + y * 8, img);
                            if (column == 4 && i != 0 && y > 0) {
                                renderTile(wallImg, 232, 8, 8, 8,
                                           img, startx + x*8, starty + (y - 1) * 8);
                            }
                        }
                    }                          
                    break;
                }
                
                
                default:
                    throw new Exception("Wall type not supported: " + walls);
            }
        }        
        
        
        public void drawWallColumn(BufferedImage wallImg, int sx0, int sy0, int ntiles, int tx, int ty, BufferedImage img)
        {
            renderTile(wallImg, sx0, sy0, 8, 8*ntiles, img, tx, ty);
        }
        
        
        public void renderDoors(int startx, int starty, BufferedImage img) throws Exception
        {
            for(WestenDoor door:doors) {
                // draw a door:
                door.draw(startx, starty, img, this);
            }
        }        

        
        public void renderObjects(int startx, int starty, BufferedImage img) throws Exception
        {
            // add door objects:
            for(WestenDoor door:doors) {
                switch(door.type) {
                    case "door-left-brick": 
                        objects.add(new WestenObject(new String[]{"doorframe-brick-left", 0 + "", (door.position+2)+"", door.h+""}));
                        break;
                    case "door-left-brick-stairs": 
                        objects.add(new WestenObject(new String[]{"doorframe-brick-left", 0 + "", (door.position+2)+"", door.h+""}));
                        break;
//                    case "door-left-bookshelf": 
//                        objects.add(doorColliderObjectY(tokens, 8, "doorframe-bookshelf-left", usedObjects));
//                        break;
                    case "door-wood-nw":
                        objects.add(new WestenObject(new String[]{"doorframe-wood-left", 0 + "", (door.position+2)+"", door.h+""}));
                        break;
                    case "door-victorian-tiles-nw":
                        objects.add(new WestenObject(new String[]{"doorframe-wood-left", 0 + "", (door.position+2)+"", door.h+""}));
                        break;
//                    case "door-gothic-nw":
//                        objects.add(doorColliderObjectY(tokens, 148, "doorframe-gothic-left", usedObjects));
//                        break;

                    case "door-right-brick": 
                        objects.add(new WestenObject(new String[]{"doorframe-brick-right", (door.position+4)+"", 0+"", door.h+""}));
                        break;
                    case "door-right-brick-stairs": 
                        objects.add(new WestenObject(new String[]{"doorframe-brick-right", (door.position+4)+"", 0+"", door.h+""}));
                        break;
//                    case "door-right-bookshelf": 
//                        objects.add(doorColliderObjectX(tokens, 9, "doorframe-bookshelf-right", usedObjects));
//                        break;
                    case "door-right-entrance": 
                        objects.add(new WestenObject(new String[]{"doorframe-entrance-right", (door.position+4)+"", 0+"", door.h+""}));
                        break;
                    case "door-wood-ne":
                        objects.add(new WestenObject(new String[]{"doorframe-wood-right", (door.position+4)+"", 0+"", door.h+""}));
                        break;
                    case "door-victorian-tiles-ne":
                        objects.add(new WestenObject(new String[]{"doorframe-wood-right", (door.position+4)+"", 0+"", door.h+""}));
                        break;
//                    case "door-gothic-ne":
//                        objects.add(doorColliderObjectX(tokens, 149, "doorframe-gothic-right", usedObjects));
//                        break;                    

                    case "door-empty-ne":
                    case "door-empty-sw":
                    case "door-wood-sw":
                    case "door-wood-se":
                    case "door-sw":
                    case "door-se":
                        break;
                        
                    default:
                        throw new Exception("unimplemented door type: " + door.type);
                }
            }
            
            // add candles:
//            db 8, 2, 2, 32
//            db 22, 4, 2, 0
//            db 24, 8, 4, 0            
            if (roomPath.equals("data/rooms/part1/room8-kitchen.txt")) {
                objects.add(new WestenObject(new String[]{"candle", "2", "2", "32"}));
            }
            if (roomPath.equals("data/rooms/part2/room22-closet.txt")) {
                objects.add(new WestenObject(new String[]{"candle", "4", "2", "0"}));
            }
            if (roomPath.equals("data/rooms/part2/room24-ritual.txt")) {
                objects.add(new WestenObject(new String[]{"candle", "8", "4", "0"}));
            }
            
            // remove objects that should not be rendered:
            List<WestenObject> toDelete = new ArrayList<>();
            for(WestenObject o:objects) {
                if (o.type.equals("chest-reveal") ||
                    o.type.equals("chest-reveal-2")) {
                    toDelete.add(o);
                } 
            }
            objects.removeAll(toDelete);
            
            // sort objects:
            Collections.sort(objects, new Comparator<WestenObject>() {
                @Override
                public int compare(WestenObject o1, WestenObject o2) {           
                    try {
                        String type1 = canonicalType(o1.type);
                        String type2 = canonicalType(o2.type);
                        if (type1 == null) type1 = o1.type;
                        if (type2 == null) type2 = o2.type;
                        {
                            // sort by x:
                            int o1_x1 = o1.x*8;
                            int o1_x2 = o1.x*8 + Rooms.getObjectDimensionsFromName(type1)[0];
                            int o2_x1 = o2.x*8;
                            int o2_x2 = o2.x*8 + Rooms.getObjectDimensionsFromName(type2)[0];
                            if (o1_x2 <= o2_x1) return -1;
                            if (o2_x2 <= o1_x1) return 1;
                        }
                        {
                            // sort by y:
                            int o1_y1 = o1.y*8;
                            int o1_y2 = o1.y*8 + Rooms.getObjectDimensionsFromName(type1)[1];
                            int o2_y1 = o2.y*8;
                            int o2_y2 = o2.y*8 + Rooms.getObjectDimensionsFromName(type2)[1];
                            if (o1_y2 <= o2_y1) return -1;
                            if (o2_y2 <= o1_y1) return 1;
                        }
                        {
                            // sort by z:
                            int o1_z1 = (o1.h > 128 ? o1.h - 256: o1.h);
                            int o1_z2 = o1_z1 + Rooms.getObjectDimensionsFromName(type1)[2];
                            int o2_z1 = (o2.h > 128 ? o2.h - 256: o2.h);
                            int o2_z2 = o2_z1 + Rooms.getObjectDimensionsFromName(type2)[2];
                            if (o1_z2 <= o2_z1) return -1;
                            if (o2_z2 <= o1_z1) return 1;
                        }
                        return 0;
                    } catch(Exception e) {
                        e.printStackTrace();
                        System.exit(1);
                        return 0;
                    }      
                }
            });            
            for(WestenObject object:objects) {
                // draw an object:
                object.draw(startx, starty, img, this);
            }
        }        
    }
}
