/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package westen;

import PNGtoMSX.ConvertPatternsToAssembler;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import util.Pletter;
import util.Z80Assembler;
import util.ZX0Wrapper;

/**
 *
 * @author santi
 */
public class Walls {
    public static int TOLERANCE = 64;
    public static int MAX_SIZE = 780;
    
    static public int MSX1Palette[][] = {{0,0,0},
                                    {0,0,0},
                                    {43,221,81},  // green
                                    {81,255,118},  // light green
                                    {81,81,255},
                                    {118,118,255},
                                    {221,81,81},
                                    {81,255,255},
                                    {255,81,81},
                                    {255,118,118},
                                    {255,221,81},
                                    {255,255,118},
                                    {43,187,43},  // fark green
                                    {221,81,187},
                                    {221,221,221},
                                    {255,255,255}};
        
    
    public static void main(String args[]) throws Exception
    {
        generateWallData(true);
    }
    
    
    public static void generateWallData(boolean Exversion) throws Exception
    {
        String wallsFileName = "data/walls.png";
        String wallsPath_output = "src/autogenerated/";
        
        ConvertPatternsToAssembler.MSX1Palette = MSX1Palette;
        
//        generateWallData(wallsFileName, 0, 0, wallsPath_output + "wall-bookshelves");
        generateWallData(wallsFileName, 20, 0, wallsPath_output + "wall-bookshelves");
        generateWallData(wallsFileName, 0, 6, wallsPath_output + "wall-blue-bricks");
        generateWallData(wallsFileName, 10, 0, wallsPath_output + "wall-entrance");
        generateWallData(wallsFileName, 10, 6, wallsPath_output + "wall-victorian");
        generateWallData(wallsFileName, 20, 6, wallsPath_output + "wall-bricks-shelves");
        generateWallData(wallsFileName, 0, 12, wallsPath_output + "wall-ossuary");
        generateWallData(wallsFileName, 10, 12, wallsPath_output + "wall-white-stone");
    }
    
    
    private static void generateWallData(
            String wallsFileName, int x, int y, 
            String outputFileName) throws Exception {
        BufferedImage img = ImageIO.read(new File(wallsFileName));    
        
        List<List<Integer>> tiles = new ArrayList<>();
        int nameTable[][] = new int[10][6];
        
        List<Integer> data = new ArrayList<>();
        
        for(int i = 0;i<6;i++) {
            for(int j = 0;j<10;j++) {
                List<Integer> tileData = new ArrayList<>();
                tileData.addAll(ConvertPatternsToAssembler.generateAssemblerPatternBitmap(x+j, y+i, img, TOLERANCE));
                tileData.addAll(ConvertPatternsToAssembler.generateAssemblerPatternAttributes(x+j, y+i, img, TOLERANCE));
                // Make sure no tile is completely dark (so, enemies and bullets can be seen):
                for(int k = 0;k<8;k++) {
                    int attribute = tileData.get((tileData.size()-8)+k);
                    if (attribute == 0) {
                        if (k == 0) {
                            tileData.set((tileData.size()-8)+k, 4*16);
                        } else {
                            tileData.set((tileData.size()-8)+k, tileData.get((tileData.size()-8)+k-1));
                        }
                    }
                }
                
                int tile = findTile(tileData, tiles);
                if (tile == -1) {
                    tile = tiles.size();
                    tiles.add(tileData);
                }
                nameTable[j][i] = tile;
                data.add(tile);
            }
        }
        
        tiles.remove(0);    // remove the empty tile
        
        // Generate data:
        for(List<Integer> tile:tiles) {
            data.addAll(tile);
        }

        System.out.println("generateWallData, nTiles: " + tiles.size());
        System.out.println("generateWallData, data size: " + data.size());
        if (data.size() > MAX_SIZE) {
            throw new Exception("wall data larger than current limit: " + MAX_SIZE);
        }
        
        Z80Assembler.dataToBinary(data, outputFileName+".bin");    
        Pletter.intMain(new String[]{outputFileName+".bin", outputFileName+".plt"});
        ZX0Wrapper.main(outputFileName+".bin", outputFileName+".zx0", true, false);
    }
    
    
    public static int findTile(List<Integer> tile, List<List<Integer>> tiles)
    {
        for(int i = 0;i<tiles.size();i++) {
            boolean found = true;
            for(int j = 0;j<tile.size();j++) {
                if (!tile.get(j).equals(tiles.get(i).get(j))) {
                    found = false;
                    break;
                }
            }
            if (found) return i;
        }
        return -1;
    }
}
