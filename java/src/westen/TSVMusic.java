/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package westen;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.StringTokenizer;
import music.MSXNote;
import music.MSXSong;
import music.MSXSongWavGenerator;
import util.Pletter;
import util.ZX0Wrapper;

/**
 *
 * @author santi
 */
public class TSVMusic {
    public static String noteNames[][] = {{"do","c"}, 
                                          {"do#", "reb","c#","db"},
                                          {"re","d"},
                                          {"re#", "mib","d#","eb"},
                                          {"mi","e"},
                                          {"fa","f"},
                                          {"fa#", "solb","f#","gb"},
                                          {"sol","g"},
                                          {"sol#", "lab","g#","ab"},
                                          {"la","a"},
                                          {"la#", "sib","a#","bb"},
                                          {"si","b"}};
    
    public static void main(String args[]) throws Exception
    {        
        createWestenSongs();

//        playTSVMusic("data/music/iso-intro.tsv", 12);
//        playTSVMusic("data/music/iso-ingame1.tsv", 8);
//        playTSVMusic("data/music/iso-ingame2.tsv", 7);  // 7
//        playTSVMusic("data/music/iso-vampire.tsv", 8);
//        playTSVMusic("data/music/iso-ending-v1.tsv", 24);
//        playTSVMusic("data/music/iso-ending-v2.tsv", 12);
//        playTSVMusic("data/music/iso-ending-v3.tsv", 12);        
    }
    
    

    
    public static void createWestenSongs() throws Exception
    {
        MSXSong story = loadTSVMusic("data/music/iso-intro.tsv");
        story.loopBackTime = 0;
        MSXSong ingame1 = loadTSVMusic("data/music/iso-ingame1.tsv");
        ingame1.loopBackTime = 0;
        MSXSong ingame2 = loadTSVMusic("data/music/iso-ingame2.tsv");
        ingame2.loopBackTime = 0;
        MSXSong ingame3 = loadTSVMusic("data/music/iso-vampire.tsv");
        ingame3.loopBackTime = 0;
        MSXSong ending = loadTSVMusic("data/music/iso-ending-v3.tsv");
        ending.loopBackTime = 0;
        
        List<Integer> notesUsed = new ArrayList<>();
        story.findNotesUsedBySong(0, notesUsed);
        ingame1.findNotesUsedBySong(0, notesUsed);
        ingame2.findNotesUsedBySong(0, notesUsed);
        ingame3.findNotesUsedBySong(0, notesUsed);
        ending.findNotesUsedBySong(0, notesUsed);
        Collections.sort(notesUsed);
        System.out.println("; notes used("+notesUsed.size()+"): " + notesUsed);

        System.out.println("");
        System.out.print("; ");
        for(int idx = 0;idx<notesUsed.size();idx++) {
            System.out.print(notesUsed.get(idx) + " ");
        }
        System.out.println("");
        System.out.print("note_period_table:");
        for(int idx = 0;idx<notesUsed.size();idx++) {
            int note = notesUsed.get(idx);
            int period = MSXNote.PSGNotePeriod(note); 
            if (idx%8 == 0) System.out.print("\n  db ");
            System.out.print((period/256) + "," + (period%256));
            if (idx%8 != 7) System.out.print(",  ");
        }
        System.out.println("\n");
        
        compileAssemblerSong(story, "src/autogenerated/music/intro", notesUsed);
        compileAssemblerSong(ingame1, "src/autogenerated/music/ingame1", notesUsed);
        compileAssemblerSong(ingame2, "src/autogenerated/music/ingame2", notesUsed);
        compileAssemblerSong(ingame3, "src/autogenerated/music/ingame3", notesUsed);
        compileAssemblerSong(ending, "src/autogenerated/music/ending", notesUsed);
    }
    
    
    public static void compileAssemblerSong(MSXSong song, String fileName, List<Integer> notesUsed) throws Exception
    {
        PrintStream w = new PrintStream(new File(fileName + ".asm"));
        song.convertToAssembler("song", notesUsed, "  include \"../../constants.asm\"", w);
        w.flush();
        w.close();  
        
        nl.grauw.glass.Assembler.main(new String[]{fileName + ".asm", fileName + ".bin"});
        Pletter.intMain(new String[]{fileName + ".bin", fileName + ".plt"});  
        ZX0Wrapper.main(fileName+".bin", fileName+".zx0", true, false);        
    }
    
    public static MSXSong loadTSVMusic(String fileName) throws Exception
    {
        // Init:
        MSXSong song = new MSXSong();
        
        int ch_instrument[] = {MSXNote.INSTRUMENT_SQUARE_WAVE, 
                               MSXNote.INSTRUMENT_SQUARE_WAVE, 
                               MSXNote.INSTRUMENT_SQUARE_WAVE};
        MSXNote channelNotes[] = {null, null, null};
        
        BufferedReader br = new BufferedReader(new FileReader(fileName));
        while(br.ready()) {
            String line = br.readLine();
            String channels[] = line.split("\t");
            for(int channel = 0;channel<channels.length;channel++) {
                String commands[] = channels[channel].split(",");
                for(String command:commands) {
                    command = command.strip();
                    if (command.length() == 0) continue;
                    command = command.toLowerCase();
                    StringTokenizer tokenizer = new StringTokenizer(command, "()");
                    String commandName = tokenizer.nextToken();
                    switch(commandName) {
                        case "-":
                            {
                                MSXNote note = new MSXNote(0);
                                song.channels[channel].add(note);
                                channelNotes[channel] = note;                            
                            }
                            break;
                        case "squarewave":
                            ch_instrument[channel] = MSXNote.INSTRUMENT_SQUARE_WAVE;
                            break;
                        case "piano":
                            ch_instrument[channel] = MSXNote.INSTRUMENT_PIANO;
                            break;
                        case "pianosoft":
                            ch_instrument[channel] = MSXNote.INSTRUMENT_PIANO_SOFT;
                            break;
                        case "wind":
                            ch_instrument[channel] = MSXNote.INSTRUMENT_WIND;
                            break;
                        case "pianostaccato":
                            ch_instrument[channel] = MSXNote.INSTRUMENT_PIANO_STACCATO;
                            break;
                        case "windfading":
                            ch_instrument[channel] = MSXNote.INSTRUMENT_WIND_FADING;
                            break;
                        case "pad":
                            ch_instrument[channel] = MSXNote.INSTRUMENT_PAD;
                            break;
                        case "fade":
                            ch_instrument[channel] = MSXNote.INSTRUMENT_FADE;
                            break;
                        case "shortwind":
                            ch_instrument[channel] = MSXNote.INSTRUMENT_SHORTWIND;
                            break;
                        case "vibrating":
                            ch_instrument[channel] = MSXNote.INSTRUMENT_PIANO_FREQUENCY_VIBRATION;
                            break;
                        case "repeat":
                            {
                                int parameter = Integer.parseInt(tokenizer.nextToken());
                                MSXNote note = new MSXNote(MSXNote.START_REPEAT, parameter);
                                song.channels[channel].add(note);
                                channelNotes[channel] = note;                            
                            }
                            break;
                        case "endrepeat":
                            {
                                MSXNote note = new MSXNote(MSXNote.END_REPEAT, 0);
                                song.channels[channel].add(note);
                                channelNotes[channel] = note;                            
                            }
                            break;
                        case "sfx":
                            {
                                String sfx = tokenizer.nextToken();
                                MSXNote note = new MSXNote(sfx,0);
                                song.channels[channel].add(note);
                                channelNotes[channel] = note;                            
                            }
                            break;
                        default:
                            // it's a note!
                            String noteStr = command.substring(0, command.length()-1);
                            String octaveStr = command.substring(command.length()-1);
                            int found = -1;
                            for(int idx = 0; idx<noteNames.length; idx++) {
                                String noteGroup[] = noteNames[idx];
                                for(String noteName:noteGroup) {
                                    if (noteStr.equals(noteName)) {
                                        found = idx;
                                        break;
                                    }
                                }
                                if (found != -1) break;
                            }
                            if (found != -1) {
                                int octave = Integer.parseInt(octaveStr);
                                MSXNote note = new MSXNote(octave, found, 15, 0, ch_instrument[channel]);
                                song.channels[channel].add(note);
                                channelNotes[channel] = note;
                            } else {
                                throw new Exception("unrecognized command: " + command);
                            }
                            break;
                    }
                }
            }

            // advance time:
            for(int i = 0;i<3;i++) {
                MSXNote note = channelNotes[i];
                if (note == null) {
                    note = new MSXNote(0);
                    song.channels[i].add(note);
                    channelNotes[i] = note;
                }
                if (note.absoluteNote >= -2) {
                    // if it's a note:
                    note.duration++;
                }
            }
        }

        return song;
    }
    
    public static void playTSVMusic(MSXSong song, int tempo) throws Exception
    {

        List<Integer> buffer = MSXSongWavGenerator.generateBuffer(tempo, song);
        MSXSongWavGenerator.playBuffer(buffer);        
    }
    
    public static void playTSVMusic(String fileName, int tempo) throws Exception
    {
        playTSVMusic(loadTSVMusic(fileName), tempo);
    }    
}
